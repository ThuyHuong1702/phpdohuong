<?php

namespace App\Console\Commands;

use App\Scaffold\Module\Traits\StubHandlerTrait;
use Illuminate\Console\Command;
use Illuminate\Filesystem\Filesystem;
use Illuminate\Support\Str;

class ModuleMakeCommand extends Command
{
    use StubHandlerTrait;

    /**
     * Command signature.
     */
    protected $signature = 'module:make {name : The name of the module}';

    /**
     * Command description.
     */
    protected $description = 'Generate a new module based on the configuration';

    /**
     * Laravel filesystem instance.
     */
    protected Filesystem $filesystem;

    /**
     * Constructor.
     */
    public function __construct(Filesystem $filesystem)
    {
        parent::__construct();
        $this->filesystem = $filesystem;
    }

    /**
     * Execute the console command.
     */
    public function handle()
    {
        // Lấy tên module
        $name = Str::studly($this->argument('name')); // Tên module được chuẩn hóa thành StudlyCase
        $modulePath = $this->getModulesByPath($name);

        // Kiểm tra xem module đã tồn tại chưa
        if ($this->filesystem->exists($modulePath)) {
            $this->error("Module [{$name}] already exists!");
            return 1; // Return failed status
        }

        // Tạo cơ cấu thư mục module
        $this->generateFolders($name);

        // Tạo các tệp STUB cần thiết
        $this->generateStubFiles($name);

        // Tạo `module.json`
        $this->generateModuleJson($name);

        // Hoàn tất
        $this->info("Module [{$name}] generated successfully!");
        return 0;
    }

    /**
     * Generate folder structure based on config.
     */
    protected function generateFolders(string $name)
    {
        $folders = config('modules.paths.generator');

        foreach ($folders as $folder) {
            if ($folder['generate']) {
                $path = config('modules.paths.modules') . "/{$name}/" . $folder['path'];
                $this->filesystem->makeDirectory($path, 0755, true); // Tạo folder với mode 0755

                // Nếu cần thêm .gitkeep
                if (config('modules.stubs.gitkeep')) {
                    $this->filesystem->put($path . '/.gitkeep', '');
                }
            }
        }

        $this->info('Folders generated.');
    }

    /**
     * Generate stub-based files.
     */
    protected function generateStubFiles(string $moduleName)
    {
        $stubs = config('modules.stubs.files');

        foreach ($stubs as $stubKey => $outputFile) {
            $stubPath = $this->getStubPath("{$stubKey}.stub");
            $outputPath = str_replace(
                [
                    '$CONTROLLER_NAMESPACE$',
                    '$STUDLY_NAME$'
                ],
                [
                    studly_case($moduleName),
                    $moduleName
                ],
                $this->getModulesByPath("{$moduleName}/{$outputFile}")
            );
            if ($this->filesystem->exists($stubPath)) {
                $stubContent = $this->filesystem->get($stubPath);
                // Replace stub variables
                $content = str_replace(
                    [
                        '$MODULE_NAMESPACE$',
                        '$VENDOR$',
                        '$LOWER_NAME$',
                        '$STUDLY_NAME$',
                        '$CONTROLLER_NAMESPACE$',
                        '$AUTHOR_NAME$',
                        '$AUTHOR_EMAIL$',
                    ],
                    [
                        studly_case(config('modules.namespace')),
                        camel_case(config('modules.composer.vendor')),
                        strtolower($moduleName),
                        $moduleName,
                        studly_case($moduleName),
                        config('modules.composer.author.name'),
                        config('modules.composer.author.email'),
                    ],
                    $stubContent
                );

                // Write the file
                $this->filesystem->ensureDirectoryExists(dirname($outputPath));
                $this->filesystem->put($outputPath, $content);

                $this->info("Created: {$outputPath}");
            } else {
                $this->error("Stub file not found: {$stubPath}");
            }
        }
    }

    /**
     * Generate module.json file.
     */
    protected function generateModuleJson(string $moduleName)
    {
        $path = config('modules.paths.modules') . "/{$moduleName}/module.json";
        $json = [
            'name' => $moduleName,
            'alias' => snake_case($moduleName),
            'description' => "{$moduleName} module generated by command.",
            'keywords' => [],
            'priority' => 10,
            'providers' => [
//                str_replace(['$STUDLY_NAME$', '$LOWER_NAME$'], [$moduleName, strtolower($moduleName)], "Modules\\CamNguyen\\Providers\\CamNguyenServiceProvider")
            ],
            'files' => [],
        ];

        $this->filesystem->put($path, json_encode($json, JSON_PRETTY_PRINT));
        $this->info('module.json file created.');
    }
}
